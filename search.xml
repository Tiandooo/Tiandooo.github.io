<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>12-16</title>
      <link href="/2022/12/16/12-16/"/>
      <url>/2022/12/16/12-16/</url>
      
        <content type="html"><![CDATA[<p><img src="image-20221216111333295.png" alt="image-20221216111333295"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> torch<span class="token keyword">import</span> Pytorch <span class="token keyword">as</span> tf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$$<br>\sqrt(\sum{abc_c^d})<br>$$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>try</title>
      <link href="/2022/10/12/try/"/>
      <url>/2022/10/12/try/</url>
      
        <content type="html"><![CDATA[<p>Welcome to try!</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: [Writing](</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/12/hello-world/"/>
      <url>/2022/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>opencv笔记</title>
      <link href="/2021/01/16/opencv%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/01/16/opencv%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-python基础"><a href="#1-python基础" class="headerlink" title="1.python基础"></a>1.python基础</h2><ul><li>数据类型和变量</li><li>函数</li><li>切片、生成器等高级特性</li><li>面向对象编程</li><li>numpy、pandas、matplotlib等库的学习</li></ul><h3 id="总结：python基础掌握良好"><a href="#总结：python基础掌握良好" class="headerlink" title="总结：python基础掌握良好"></a>总结：python基础掌握良好</h3><h2 id="2-opencv"><a href="#2-opencv" class="headerlink" title="2.opencv"></a>2.opencv</h2><ul><li>图像操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">access_pixels</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    height <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 图像高度</span>    width <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment"># 图像宽度</span>    channels <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 图像通道数</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>channels<span class="token punctuation">)</span><span class="token punctuation">:</span>                image<span class="token punctuation">[</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> image<span class="token punctuation">[</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> c<span class="token punctuation">]</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"pixels_demo"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数值、逻辑计算</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logic_demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 逻辑非运算</span>    image <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"./images/CrystalLiu2.jpg"</span><span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"image1"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"logic_demo"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">contrast_brightness_demo</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#  调整对比度</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"origion picture"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> ch <span class="token operator">=</span> image<span class="token punctuation">.</span>shape    blank <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> ch<span class="token punctuation">]</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># 纯黑背景</span>    dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>image<span class="token punctuation">,</span> c<span class="token punctuation">,</span> blank<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>c<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 通过和纯黑背景加权运算得到对比度改变</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"contrast_brightness_demo"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>色彩空间</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">color_space_demo</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    gray <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>  <span class="token comment"># 转化为灰度图像</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span>    hsv <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2HSV<span class="token punctuation">)</span>   <span class="token comment"># 转化为HSV图像</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"hsv"</span><span class="token punctuation">,</span> hsv<span class="token punctuation">)</span>    yuv <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2YUV<span class="token punctuation">)</span>   <span class="token comment"># 转化为YUV图像</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"yuv"</span><span class="token punctuation">,</span> yuv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>几何变换</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2  <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np   <span class="token comment">#读取图片</span>src <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'cat.jpg'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resize_demo</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">:</span>    rows<span class="token operator">=</span>src<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    cols<span class="token operator">=</span>src<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#图像缩放 dsize(列,行)</span>result <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>cols<span class="token operator">*</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rows<span class="token operator">*</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="掩模-mask"><a href="#掩模-mask" class="headerlink" title="掩模(mask)"></a>掩模(mask)</h4><p><code>计算结果=cv2.add(参数1, 参数2, mask) </code></p><p>当含有掩模参数时，操作只会在掩模值为<strong>非空</strong>的像素点上执行，并将其他像素点的值置为<strong>0</strong>.</p><h4 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h4><h5 id="1-Sobel算子"><a href="#1-Sobel算子" class="headerlink" title="1.Sobel算子"></a>1.Sobel算子</h5><h6 id="1-1-理论"><a href="#1-1-理论" class="headerlink" title="1.1 理论"></a>1.1 理论</h6><p> 将Sobel算子与原始图像src进行卷积计算，计算某像素点的导数</p><p><code> dst=cv2.Sobel(src, ddepth, dx, dy) ...</code></p><h6 id="1-2-ddepth"><a href="#1-2-ddepth" class="headerlink" title="1.2 ddepth"></a>1.2 ddepth</h6><p>如果将ddepth设置为1，则处理结果与原图像保持一致，但计算可能得到负数，可用<code>rst=convertScaleAbs(img)</code>将其转化为正值。</p><h6 id="1-3-方向"><a href="#1-3-方向" class="headerlink" title="1.3 方向"></a>1.3 方向</h6><h5 id="x方向梯度：dx-1-dy-0"><a href="#x方向梯度：dx-1-dy-0" class="headerlink" title="x方向梯度：dx=1,dy=0"></a>x方向梯度：dx=1,dy=0</h5><h5 id="y方向梯度：dx-0-dy-1"><a href="#y方向梯度：dx-0-dy-1" class="headerlink" title="y方向梯度：dx=0,dy=1"></a>y方向梯度：dx=0,dy=1</h5><h5 id="x方向与y方向的边缘叠加：分别获取x-y方向边缘图并用addWeighted-函数叠加"><a href="#x方向与y方向的边缘叠加：分别获取x-y方向边缘图并用addWeighted-函数叠加" class="headerlink" title="x方向与y方向的边缘叠加：分别获取x,y方向边缘图并用addWeighted()函数叠加"></a>x方向与y方向的边缘叠加：分别获取x,y方向边缘图并用<code>addWeighted()</code>函数叠加</h5><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"images/Crystal.jpg"</span><span class="token punctuation">)</span>sobelx <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>a<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_64F<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># x方向边缘</span>sobelx <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>sobelx<span class="token punctuation">)</span>sobely <span class="token operator">=</span> cv<span class="token punctuation">.</span>Sobel<span class="token punctuation">(</span>a<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_64F<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># y方向边缘</span>sobely <span class="token operator">=</span> cv<span class="token punctuation">.</span>convertScaleAbs<span class="token punctuation">(</span>sobely<span class="token punctuation">)</span>  dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>sobelx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>sobely<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># dst[] = sobelx[] * 1 + sobley[] * 1 + 0</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> sobelx<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> sobely<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"dst"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sobel与Schaar算子的比较"><a href="#Sobel与Schaar算子的比较" class="headerlink" title="Sobel与Schaar算子的比较"></a>Sobel与Schaar算子的比较</h4><p><img src="image-20201127104819544.png" alt="Sobel与Schaar算子的比较"></p><h3 id="Canny边缘检测"><a href="#Canny边缘检测" class="headerlink" title="Canny边缘检测"></a>Canny边缘检测</h3><h4 id="1-去噪"><a href="#1-去噪" class="headerlink" title="1.去噪"></a>1.去噪</h4><p>应用高斯滤波去噪，通常一个5*5的核满足大多数的情况。</p><h4 id="2-计算梯度的幅度与方向"><a href="#2-计算梯度的幅度与方向" class="headerlink" title="2.计算梯度的幅度与方向"></a>2.计算梯度的幅度与方向</h4><p>梯度的方向总是与边缘垂直的，通常就近取值为水平，垂直，对角线等8个不同的方向。<br>$$<br>G = \sqrt{G_x^2+G_y^2}<br>$$</p><p>$$<br>\Theta = atan2(G_x,G_y)<br>$$</p><h4 id="3-非极大值抑制"><a href="#3-非极大值抑制" class="headerlink" title="3.非极大值抑制"></a>3.非极大值抑制</h4><h4 id="4-确定边缘"><a href="#4-确定边缘" class="headerlink" title="4.确定边缘"></a>4.确定边缘</h4><h4 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">edges <span class="token operator">=</span> cv<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>image<span class="token punctuation">,</span> threshold1<span class="token punctuation">,</span> threshold2<span class="token punctuation">[</span><span class="token punctuation">,</span> apertureSize<span class="token punctuation">[</span><span class="token punctuation">,</span>L2gradient<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>edges为计算得到的边缘图像</li><li>image为8位输入图像</li><li>threshold1,threshold2分别为第一、第二个阈值</li><li>apertureSize为Sobel算子孔径大小</li><li>L2gradient为梯度幅度的标识。</li></ul><p>$$<br>norm=<br>\begin{cases}<br>|dI/dx|+|dI/dx| ,\ L2gradient\ =\ False\<br>\sqrt{(dI/dx)^2+(dI/dy)^2}, \ L2gradient \ = \ True<br>\end{cases}<br>$$</p><p>实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">canny</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    r2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"original image"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"r1"</span><span class="token punctuation">,</span> r1<span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"r2"</span><span class="token punctuation">,</span> r2<span class="token punctuation">)</span>a <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"images/lena.jpg"</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当threshold1,threshold2较小时，能够捕获更多的边缘信息。</p><h3 id="图像轮廓"><a href="#图像轮廓" class="headerlink" title="图像轮廓"></a>图像轮廓</h3><h4 id="1-查找并绘制轮廓"><a href="#1-查找并绘制轮廓" class="headerlink" title="1.查找并绘制轮廓"></a>1.查找并绘制轮廓</h4><h5 id="1-1查找图像轮廓：findContours函数"><a href="#1-1查找图像轮廓：findContours函数" class="headerlink" title="1.1查找图像轮廓：findContours函数"></a>1.1查找图像轮廓：findContours函数</h5><p><code>contours, hierarchy = cv2.findContours(image, mode, method)</code></p><ul><li>image: 原始图像，8位单通道图像，所有非零值被处理为1，所有零值保持不变。</li><li>contours： 返回的轮廓。<ul><li>type:  &lt;class:list&gt;</li><li>轮廓个数：len(contours)</li><li>每个轮廓的点数：len(contours[0])</li><li>轮廓内的点：contours[0]</li></ul></li><li>hirerarchy: 图像的拓扑信息（轮廓层次）</li><li>mode： 轮廓检索方式。<ul><li>cv2.RETR_EXTERNAL: 只检测外轮廓</li><li>cv2.RETR_LIST: 对检测到的轮廓不建立等级关系</li><li>cv2.RETR_CCOMP: 检索所有轮廓并将它们组织成两级层次关系</li><li>cv2.RETR_TREE: 建立一个等级树结构的轮廓。</li></ul></li><li>method： 轮廓的近似方法。<ul><li>cv2.CHAIN_APPROX_NONE: 存储所有的轮廓点，相邻两个点的像素位置差不超过1</li><li>cv2.CHAIN_APPROX_SIMPLE</li><li>cv2.CHAIN_APPROX_TC89_L1</li><li>cv2.CHAIN_APPROX_TC89_KCOS</li></ul></li></ul><h5 id="1-2-绘制图像轮廓：drawContours函数"><a href="#1-2-绘制图像轮廓：drawContours函数" class="headerlink" title="1.2 绘制图像轮廓：drawContours函数"></a>1.2 绘制图像轮廓：drawContours函数</h5><p><code>image = cv2.drawContours(image, contours, contourIdx,color[,thickness[,lineType[,hierarchy[,maxLevel[,offset]]]]])</code></p><ul><li>函数直接在image上绘制图像</li><li>contours: 需要绘制的轮廓</li><li>contourIdx: 需要绘制的轮廓索引（-1为全部绘制）</li><li>color: 绘制的颜色  (RGB值)</li><li>thickness: 画笔粗细 （-1为填充）</li></ul><h5 id="实例：提取前景对象"><a href="#实例：提取前景对象" class="headerlink" title="实例：提取前景对象"></a>实例：提取前景对象</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cvf<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"./images/home.jpg"</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"original img"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>gray <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>a<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token comment"># ret ,bianry = cv.threshold(gray, 127, 255, cv.THRESH_BINARY)</span>contours<span class="token punctuation">,</span> hierarchy <span class="token operator">=</span> cv<span class="token punctuation">.</span>findContours<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>RETR_EXTERNAL<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span>mask <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>mask <span class="token operator">=</span> cv<span class="token punctuation">.</span>drawContours<span class="token punctuation">(</span>mask<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#thickness设置为-1可以绘制实心轮廓</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"mask"</span><span class="token punctuation">,</span> mask<span class="token punctuation">)</span>loc <span class="token operator">=</span> cv<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>a<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"loc"</span><span class="token punctuation">,</span> loc<span class="token punctuation">)</span>o <span class="token operator">=</span> cv<span class="token punctuation">.</span>drawContours<span class="token punctuation">(</span>a<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># cv.imshow("result", o)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20201127131334884.png" alt="drawContours效果"></p><ul><li>人脸检测</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">face_detection</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    gray <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    face_detector <span class="token operator">=</span> cv<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">"../images/haarcascade_frontalface_alt_tree.xml"</span><span class="token punctuation">)</span>    eyes_detector <span class="token operator">=</span> cv<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">"../images/haarcascade_eye.xml"</span><span class="token punctuation">)</span>    faces <span class="token operator">=</span> face_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">1.01</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token keyword">in</span> faces<span class="token punctuation">:</span>        img <span class="token operator">=</span> cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        roi_gray <span class="token operator">=</span> gray<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span>        roi_color <span class="token operator">=</span> img<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span>        eyes <span class="token operator">=</span> eyes_detector<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>roi_gray<span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ex<span class="token punctuation">,</span> ey<span class="token punctuation">,</span> ew<span class="token punctuation">,</span> eh <span class="token keyword">in</span> eyes<span class="token punctuation">:</span>            cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>roi_color<span class="token punctuation">,</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span> ey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ex <span class="token operator">+</span> ew<span class="token punctuation">,</span> ey <span class="token operator">+</span> ey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""使用Haar分类器进行面部检测1. 简单介绍Haar特征分类器对象检测技术    它是基于机器学习的，通过使用大量的正负样本图像训练得到一个cascade_function，最后再用它来做对象检测。    如果你想实现自己的面部检测分类器，需要大量的正样本图像（面部图像）和负样本图像（不含面部的图像）来训练分类器。    可参考https://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html，这里不做介绍，现在我们利用    OpenCV已经训练好的分类器，直接利用它来实现面部和眼部检测。    2. 主要步骤：    1）加载xml分类器，并将图像或者视频处理成灰度格式 cv.CascadeClassifier()    2）对灰度图像进行面部检测，返回若干个包含面部的矩形区域 Rect（x,y,w,h）face_detector.detectMultiScale()    3）创建一个包含面部的ROI，并在其中进行眼部检测    3. 重要方法分析：def detectMultiScale(self, image, scaleFactor=None, minNeighbors=None, minSize=None, maxSize=None)    原理：检测输入图像在不同尺寸下可能含有的目标对象#minSize – Minimum possible object size. Objects smaller than that are ignored.#maxSize – Maximum possible object size. Objects larger than that are ignored.    入参：        1）image：输入的图像        2）scaleFactor：比例因子，图像尺寸每次减少的比例，要大于1，这个需要自己手动调参以便获得想要的结果        3）minNeighbors：最小附近像素值，在每个候选框边缘最小应该保留多少个附近像素        4）minSize，maxSize：最小可能对象尺寸，所检测的结果小于该值会被忽略。最大可能对象尺寸，所检测的结果大于该值会被忽略    返回：若干个包含对象的矩形区域"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="opencv总结："><a href="#opencv总结：" class="headerlink" title="opencv总结："></a>opencv总结：</h2><p>大致了解了各个API所实现的功能，对计算机图像处理有了一个初步的了解，但对于各个API的参数设置和更深层次的原理掌握的还不够透彻。</p><h2 id="3-机器学习"><a href="#3-机器学习" class="headerlink" title="3.机器学习"></a>3.机器学习</h2><p>初步掌握了几种概念。</p><ul><li>线性回归</li><li>逻辑回归</li><li>Cost Function</li><li>Loss Function</li><li>梯度下降</li><li>激活函数</li><li>神经网络</li><li>反向传播</li><li>卷积神经网络</li></ul><p>等等，但仅仅是对于对这些概念的数学表示有了初步的理解，还未结合代码更深层次的理解。且了解到的知识点还不全面，还需进一步的学习。</p><h2 id="下一步打算"><a href="#下一步打算" class="headerlink" title="下一步打算"></a>下一步打算</h2><p>继续学习opencv库，同时进一步了解CNN、SVM等机器学习概念。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
